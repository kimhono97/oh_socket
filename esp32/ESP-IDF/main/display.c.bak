/* TM1638 7 Segment Display Keypad & LED Module
 * https://www.handsontec.com/dataspecs/display/TM1638.pdf
 */

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <inttypes.h>
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "freertos/queue.h"
#include "driver/gpio.h"

void setLed(uint8_t value, uint8_t position);
uint8_t readButtons();

#define GPIO_DSTROBE    CONFIG_GPIO_OUTPUT_DSTROBE
#define GPIO_DCLOCK     CONFIG_GPIO_OUTPUT_DCLOCK
#define GPIO_DDATA      CONFIG_GPIO_OUTPUT_DDATA
#define GPIO_OUTPUT_PIN_SEL  ((1ULL<<CONFIG_GPIO_OUTPUT_DSTROBE) | (1ULL<<CONFIG_GPIO_OUTPUT_DCLOCK) | (1ULL<<CONFIG_GPIO_OUTPUT_DDATA))
/*
 * Let's say, GPIO_OUTPUT_IO_0=18, GPIO_OUTPUT_IO_1=19
 * In binary representation,
 * 1ULL<<GPIO_OUTPUT_IO_0 is equal to 0000000000000000000001000000000000000000 and
 * 1ULL<<GPIO_OUTPUT_IO_1 is equal to 0000000000000000000010000000000000000000
 * GPIO_OUTPUT_PIN_SEL                0000000000000000000011000000000000000000
 * */
#define ESP_INTR_FLAG_DEFAULT 0

void sendClockData(uint8_t value) {
    for (uint8_t i=0; i<8; i++) {
        gpio_set_level(GPIO_DCLOCK, 1);
        gpio_set_level(GPIO_DDATA, (value >> i) & 0x1);
        gpio_set_level(GPIO_DCLOCK, 0);
    }
}
void sendCommand(uint8_t value) {
    gpio_set_level(GPIO_DSTROBE, 0);
    sendClockData(value);
    gpio_set_level(GPIO_DSTROBE, 1);
}
void reset() {
    sendCommand(0x40); // set auto increment mode
    gpio_set_level(GPIO_DSTROBE, 0);
    sendClockData(0xc0); // set starting address to 0
    for (uint8_t i = 0; i < 16; i++) {
        sendClockData(0x00);
    }
    gpio_set_level(GPIO_DSTROBE, 1);
}
void setup() {
    gpio_config_t io_conf = {};
    io_conf.intr_type = GPIO_INTR_DISABLE;
    io_conf.mode = GPIO_MODE_OUTPUT;
    io_conf.pin_bit_mask = GPIO_OUTPUT_PIN_SEL;
    io_conf.pull_down_en = 0;
    io_conf.pull_up_en = 0;
    gpio_config(&io_conf);

    sendCommand(0x8f); // activate
    reset();
}

uint8_t scroll_index = 0;
uint8_t counting_digit = 0;
uint8_t buttons_block = 0;

bool counting() {
    /*0*/ /*1*/ /*2*/ /*3*/ /*4*/ /*5*/ /*6*/ /*7*/ /*8*/ /*9*/
    uint8_t digits[] = { 0x3f, 0x06, 0x5b, 0x4f, 0x66, 0x6d, 0x7d, 0x07, 0x7f, 0x6f };
    sendCommand(0x40);
    gpio_set_level(GPIO_DSTROBE, 0);
    sendClockData(0xc0);
    for (uint8_t position = 0; position < 8; position++) {
        sendClockData(digits[counting_digit]);
        sendClockData(0x00);
    }
    gpio_set_level(GPIO_DSTROBE, 1);
    counting_digit = (counting_digit + 1) % 10;
    return counting_digit == 0;
}
bool scroll() {
    uint8_t scrollText[] = {
        /* */ /* */ /* */ /* */ /* */ /* */ /* */ /* */
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        /*H*/ /*E*/ /*L*/ /*L*/ /*O*/ /*.*/ /*.*/ /*.*/
        0x76, 0x79, 0x38, 0x38, 0x3f, 0x80, 0x80, 0x80,
        /* */ /* */ /* */ /* */ /* */ /* */ /* */ /* */
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        /*H*/ /*E*/ /*L*/ /*L*/ /*O*/ /*.*/ /*.*/ /*.*/
        0x76, 0x79, 0x38, 0x38, 0x3f, 0x80, 0x80, 0x80,
    };
    uint8_t scrollLength = sizeof(scrollText);
    sendCommand(0x40);
    gpio_set_level(GPIO_DSTROBE, 0);
    sendClockData(0xc0);
    for (int i = 0; i < 8; i++) {
        uint8_t c = scrollText[(scroll_index + i) % scrollLength];
        sendClockData(c);
        sendClockData(c != 0 ? 1 : 0);
    }
    gpio_set_level(GPIO_DSTROBE, 1);
    scroll_index = (scroll_index + 1) % (scrollLength << 1);
    return scroll_index == 0;
}
void buttons() {
    uint8_t promptText[] = {
        /*P*/ /*r*/ /*E*/ /*S*/ /*S*/ /* */ /* */ /* */
        0x73, 0x50, 0x79, 0x6d, 0x6d, 0x00, 0x00, 0x00,
        /* */ /* */ /* */ /* */ /* */ /* */ /* */ /* */
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        /*b*/ /*u*/ /*t*/ /*t*/ /*o*/ /*n*/ /*S*/ /* */
        0x7c, 0x1c, 0x78, 0x78, 0x5c, 0x54, 0x6d, 0x00,
        /* */ /* */ /* */ /* */ /* */ /* */ /* */ /* */
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    uint8_t textStartPos = (buttons_block / 4) << 3;
    for (uint8_t position = 0; position < 8; position++) {
        sendCommand(0x44);
        gpio_set_level(GPIO_DSTROBE, 0);
        sendClockData(0xC0 + (position << 1));
        sendClockData(promptText[textStartPos + position]);
        gpio_set_level(GPIO_DSTROBE, 1);
    }
    buttons_block = (buttons_block + 1) % 16;
    uint8_t buttons = readButtons();
    for (uint8_t position = 0; position < 8; position++) {
        uint8_t mask = 0x1 << position;
        setLed(buttons & mask ? 1 : 0, position);
    }
}
uint8_t readButtons() {
    uint8_t buttons = 0xAA; // 1010 1010
    return buttons;
}
void setLed(uint8_t value, uint8_t position) {
    sendCommand(0x44);
    gpio_set_level(GPIO_DSTROBE, 0);
    sendClockData(0xC1 + (position << 1));
    sendClockData(value);
    gpio_set_level(GPIO_DSTROBE, 1);
}


#define COUNTING_MODE 0
#define SCROLL_MODE 1
#define BUTTON_MODE 2
void display_test() {
    printf("\n\n<--- DISPLAY SETUP\n");
    setup();
    uint8_t mode = COUNTING_MODE;
    uint8_t x = 0;
    while (true) {
        // switch (mode) {
        //     case COUNTING_MODE:
        //         counting();
        //         break;
        //     case SCROLL_MODE:
        //         scroll();
        //         break;
        //     case BUTTON_MODE:
        //         buttons();
        //         break;
        // }
        printf(" x=%d", x);
        for (uint8_t position = 0; position < 8; position++) {
            uint8_t mask = 0x1 << position;
            setLed(x & mask ? 1 : 0, position);
        }
        x = (x + 1) % 0xFF;
        vTaskDelay(1000 / portTICK_PERIOD_MS);
    }
}